name: ⏭️ CLI Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # stable e.g. v0.1.0 (excludes pre-releases like v0.1.0-alpha.0)

jobs:
  cli-release:
    name: ⏭️ CLI Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: 🔐 Setup npm auth
        run: |
          echo "registry=https://registry.npmjs.org" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📦 Extract version from tag
        id: version
        run: |
          # Extract version from git tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: 🔍 Verify version matches package.json
        run: |
          cd packages/xyd-js
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: ${{ steps.version.outputs.VERSION }}"
          
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
            echo "❌ Version mismatch! Package.json has $PACKAGE_VERSION but tag is ${{ steps.version.outputs.VERSION }}"
            exit 1
          fi
          echo "✅ Version match confirmed"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.10.0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm i

      - name: Build packages
        run: pnpm build

      - name: 🧪 Run Unit Tests
        run: pnpm test:unit

      - name: 🧪 Run E2E Tests
        run: pnpm test:e2e

      - name: Install local xyd-js CLI
        run: |
          cd packages/xyd-js
          npm i -g .

      - name: 🧪 Run Node Support Tests
        run: |
          # Run node support tests
          pnpm run test:node-support

      - name: 🚀 Publish to npm
        run: |
          cd packages/xyd-js
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📝 Generate release notes
        id: release_notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x scripts/release-notes.mjs
          RELEASE_BODY=$(./scripts/release-notes.mjs "${{ steps.version.outputs.VERSION }}")
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🏷️ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_BODY }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}

      - name: 🎨 Generate Node.js Support Baseline
        run: |
          chmod +x scripts/generate-baseline.mjs
          VERSION=${{ steps.version.outputs.VERSION }} node scripts/generate-baseline.mjs test-results.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
