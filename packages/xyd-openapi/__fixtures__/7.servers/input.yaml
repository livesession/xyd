openapi: 3.0.0
info:
  title: Sample API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
paths:
  /users:
    get:
      summary: Returns a list of users
      description: Optional extended description in CommonMark or HTML.
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          required: true
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A JSON array of users
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/User'
    post:
      summary: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get user by ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update user (full update)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Update user (partial update)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user
      responses:
        '204':
          description: User deleted successfully
  /users/{userId}/posts:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get user's posts
      responses:
        '200':
          description: List of user's posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        status:
          type: string
          enum: [active, inactive]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserInput:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        status:
          type: string
          enum: [active, inactive]
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        status:
          type: string
          enum: [active, inactive]
    Post:
      type: object
      required:
        - id
        - title
        - content
        - userId
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        userId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PostInput:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string
