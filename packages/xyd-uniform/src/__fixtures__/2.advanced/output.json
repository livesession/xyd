{
  "$id": "$rest.request.body",
  "type": "object",
  "properties": {
    "model": {
      "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n",
      "anyOf": [
        {
          "type": "string",
          "description": ""
        },
        {
          "description": "",
          "type": "string",
          "enum": [
            "gpt-4.1",
            "gpt-4.1-mini",
            "gpt-4.1-nano",
            "gpt-4.1-2025-04-14",
            "gpt-4.1-mini-2025-04-14",
            "gpt-4.1-nano-2025-04-14",
            "o3-mini",
            "o3-mini-2025-01-31",
            "o1",
            "o1-2024-12-17",
            "gpt-4o",
            "gpt-4o-2024-11-20",
            "gpt-4o-2024-08-06",
            "gpt-4o-2024-05-13",
            "gpt-4o-mini",
            "gpt-4o-mini-2024-07-18",
            "gpt-4.5-preview",
            "gpt-4.5-preview-2025-02-27",
            "gpt-4-turbo",
            "gpt-4-turbo-2024-04-09",
            "gpt-4-0125-preview",
            "gpt-4-turbo-preview",
            "gpt-4-1106-preview",
            "gpt-4-vision-preview",
            "gpt-4",
            "gpt-4-0314",
            "gpt-4-0613",
            "gpt-4-32k",
            "gpt-4-32k-0314",
            "gpt-4-32k-0613",
            "gpt-3.5-turbo",
            "gpt-3.5-turbo-16k",
            "gpt-3.5-turbo-0613",
            "gpt-3.5-turbo-1106",
            "gpt-3.5-turbo-0125",
            "gpt-3.5-turbo-16k-0613"
          ]
        }
      ]
    },
    "name": {
      "type": "string",
      "description": "The name of the assistant. The maximum length is 256 characters.\n"
    },
    "description": {
      "type": "string",
      "description": "The description of the assistant. The maximum length is 512 characters.\n"
    },
    "instructions": {
      "type": "string",
      "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n"
    },
    "reasoning_effort": {
      "description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
      "type": "string",
      "enum": [
        "low",
        "medium",
        "high"
      ]
    },
    "tools": {
      "type": "array",
      "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n",
      "items": {
        "description": "",
        "oneOf": [
          {
            "type": "object",
            "description": "",
            "properties": {
              "type": {
                "description": "The type of tool being defined: `code_interpreter`",
                "type": "string",
                "enum": [
                  "code_interpreter"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "description": "",
            "properties": {
              "type": {
                "description": "The type of tool being defined: `file_search`",
                "type": "string",
                "enum": [
                  "file_search"
                ]
              },
              "file_search": {
                "type": "object",
                "description": "Overrides for the file search tool.",
                "properties": {
                  "max_num_results": {
                    "type": "integer",
                    "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
                  },
                  "ranking_options": {
                    "type": "object",
                    "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n",
                    "properties": {
                      "ranker": {
                        "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
                        "type": "string",
                        "enum": [
                          "auto",
                          "default_2024_08_21"
                        ]
                      },
                      "score_threshold": {
                        "type": "number",
                        "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1."
                      }
                    },
                    "required": [
                      "score_threshold"
                    ]
                  }
                }
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "description": "",
            "properties": {
              "type": {
                "description": "The type of tool being defined: `function`",
                "type": "string",
                "enum": [
                  "function"
                ]
              },
              "function": {
                "type": "object",
                "description": "",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A description of what the function does, used by the model to choose when and how to call the function."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                  },
                  "parameters": {
                    "type": "object",
                    "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list."
                  },
                  "strict": {
                    "type": "boolean",
                    "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "function"
            ]
          }
        ]
      }
    },
    "tool_resources": {
      "type": "object",
      "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
      "properties": {
        "code_interpreter": {
          "type": "object",
          "description": "",
          "properties": {
            "file_ids": {
              "type": "array",
              "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n",
              "items": {
                "type": "string",
                "description": ""
              }
            }
          }
        },
        "file_search": {
          "description": "",
          "oneOf": [
            {
              "type": "object",
              "description": ""
            },
            {
              "type": "object",
              "description": ""
            }
          ]
        }
      }
    },
    "metadata": {
      "type": "object",
      "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n"
    },
    "temperature": {
      "type": "number",
      "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
    },
    "top_p": {
      "type": "number",
      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
    },
    "response_format": {
      "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
      "oneOf": [
        {
          "description": "`auto` is the default value\n",
          "type": "string",
          "enum": [
            "auto"
          ]
        },
        {
          "type": "object",
          "description": "Default response format. Used to generate text responses.\n",
          "properties": {
            "type": {
              "description": "The type of response format being defined. Always `text`.",
              "type": "string",
              "enum": [
                "text"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "description": "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n",
          "properties": {
            "type": {
              "description": "The type of response format being defined. Always `json_object`.",
              "type": "string",
              "enum": [
                "json_object"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n",
          "properties": {
            "type": {
              "description": "The type of response format being defined. Always `json_schema`.",
              "type": "string",
              "enum": [
                "json_schema"
              ]
            },
            "json_schema": {
              "type": "object",
              "description": "Structured Outputs configuration options, including a JSON Schema.\n",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                },
                "schema": {
                  "type": "object",
                  "description": "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n"
                },
                "strict": {
                  "type": "boolean",
                  "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "type",
            "json_schema"
          ]
        }
      ]
    }
  }
}