[
  {
    "title": "Get Sessions",
    "canonical": "get-sessions",
    "description": "---\ntitle: List sessions\ngroup: [Endpoints]\n---\n\nList of all sessions\n",
    "type": "rest_get",
    "category": "rest",
    "context": {
      "method": "get",
      "path": "/sessions",
      "group": [
        "Sessions"
      ],
      "fullPath": "https:/api.livesession.io/v1/sessions",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "users.sessions:read"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request GET \\\n     --url https://api.livesession.io/v1/sessions \\\n     --header 'accept: application/json'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('https://api.livesession.io/v1/sessions', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/sessions\"\n\nheaders = {\"accept\": \"application/json\"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/sessions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"total\": 0,\n  \"page\": {\n    \"num\": 0,\n    \"size\": 0\n  },\n  \"sessions\": [\n    {\n      \"id\": \"string\",\n      \"website_id\": \"string\",\n      \"session_url\": \"string\",\n      \"creation_timestamp\": 0,\n      \"duration\": 0,\n      \"end_timestamp\": 0,\n      \"active_time\": 0,\n      \"end_url\": \"string\",\n      \"expiration_timestamp\": 0,\n      \"last_event_timestamp\": 0,\n      \"product\": \"string\",\n      \"device\": \"string\",\n      \"tags\": [\n        \"string\"\n      ],\n      \"last_seen_page_view_id\": \"string\",\n      \"seen\": true,\n      \"referrer\": \"string\",\n      \"start_url\": \"string\",\n      \"visitor_first_session\": true,\n      \"engagment_score\": 0,\n      \"visitor\": {\n        \"id\": \"string\",\n        \"ip\": \"string\",\n        \"geolocation\": {\n          \"country_code\": \"string\",\n          \"city\": \"string\",\n          \"region\": \"string\"\n        },\n        \"name\": \"string\",\n        \"email\": \"string\",\n        \"email_hash\": \"string\",\n        \"params\": [\n          {\n            \"name\": \"string\",\n            \"value\": \"string\"\n          }\n        ],\n        \"last_session_timestamp\": 0,\n        \"first_session_timestamp\": 0\n      },\n      \"resolution\": {\n        \"height\": 0,\n        \"width\": 0,\n        \"resolution\": \"string\"\n      },\n      \"os\": {\n        \"name\": \"string\",\n        \"version\": \"string\"\n      },\n      \"browser\": {\n        \"description\": \"string\",\n        \"name\": \"string\",\n        \"version\": \"string\"\n      },\n      \"utm\": {\n        \"source\": \"string\",\n        \"medium\": \"string\",\n        \"campaign\": \"string\",\n        \"term\": \"string\",\n        \"content\": \"string\"\n      },\n      \"page_views_statistics\": {\n        \"count\": 0\n      },\n      \"events_statistics\": {\n        \"clicks\": 0,\n        \"error_clicks\": 0,\n        \"rage_clicks\": 0,\n        \"error_logs\": 0,\n        \"net_errors\": 0\n      }\n    }\n  ]\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Query parameters",
        "properties": [
          {
            "name": "page",
            "type": "integer",
            "description": "The number of page to start with (default 0, max 10000).",
            "meta": []
          },
          {
            "name": "size",
            "type": "integer",
            "description": "The number of page's size (default 25, max 100).",
            "meta": []
          },
          {
            "name": "email",
            "type": "string",
            "description": "The email address that you have associated with a session via [identify](/docs/api/browser/methods#identify).",
            "meta": []
          },
          {
            "name": "visitor_id",
            "type": "string",
            "description": "The visitor ID.",
            "meta": []
          },
          {
            "name": "tz",
            "type": "string",
            "description": "IANA timezone. Default Europe/London if RelativeDateString is applied.",
            "meta": []
          },
          {
            "name": "date_from",
            "type": "$$xor",
            "description": "[ISO 8601](https://wikipedia.org/wiki/ISO_8601) string or [RelativeDateString](/docs/api/rest/RelativeDateString).\n",
            "properties": [
              {
                "name": "date_from",
                "type": "string",
                "description": "",
                "meta": []
              },
              {
                "name": "date_from",
                "type": "$$enum",
                "description": "* `TODAY` - Today since midnight\n* `YESTERDAY` - Yesterday since midnight\n* `BEGINNING_OF_WEEK` - Nearest monday since midnight\n* `BEGINNING_OF_MONTH` - 1st of the month since midnight\n* `BEGINNING_OF_PREV_MONTH` - Previous 1st of the month since midnight\n* `TODAY-7DAYS` - Exact 7 days ago since midnight\n* `TODAY-30DAYS` - Exact 30 days ago since midnight\n",
                "meta": [
                  {
                    "name": "enum-type",
                    "value": "string"
                  }
                ],
                "properties": [
                  {
                    "name": "TODAY",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "YESTERDAY",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "BEGINNING_OF_WEEK",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "BEGINNING_OF_MONTH",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "BEGINNING_OF_PREV_MONTH",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "TODAY-7DAYS",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "TODAY-30DAYS",
                    "type": "string",
                    "description": "",
                    "meta": []
                  }
                ],
                "ofProperty": {
                  "name": "",
                  "description": "",
                  "type": "string"
                }
              }
            ],
            "meta": []
          },
          {
            "name": "date_to",
            "type": "$$xor",
            "description": "[ISO 8601](https://wikipedia.org/wiki/ISO_8601) string or [RelativeDateString](/docs/api/rest/RelativeDateString).\n",
            "properties": [
              {
                "name": "date_to",
                "type": "string",
                "description": "",
                "meta": []
              },
              {
                "name": "date_to",
                "type": "$$enum",
                "description": "* `TODAY` - Today since midnight\n* `YESTERDAY` - Yesterday since midnight\n* `BEGINNING_OF_WEEK` - Nearest monday since midnight\n* `BEGINNING_OF_MONTH` - 1st of the month since midnight\n* `BEGINNING_OF_PREV_MONTH` - Previous 1st of the month since midnight\n* `TODAY-7DAYS` - Exact 7 days ago since midnight\n* `TODAY-30DAYS` - Exact 30 days ago since midnight\n",
                "meta": [
                  {
                    "name": "enum-type",
                    "value": "string"
                  }
                ],
                "properties": [
                  {
                    "name": "TODAY",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "YESTERDAY",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "BEGINNING_OF_WEEK",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "BEGINNING_OF_MONTH",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "BEGINNING_OF_PREV_MONTH",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "TODAY-7DAYS",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "TODAY-30DAYS",
                    "type": "string",
                    "description": "",
                    "meta": []
                  }
                ],
                "ofProperty": {
                  "name": "",
                  "description": "",
                  "type": "string"
                }
              }
            ],
            "meta": []
          }
        ],
        "type": "$rest.param.query"
      },
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "Successful response",
            "properties": [
              {
                "name": "total",
                "type": "integer",
                "description": "Total number of sessions matching the query",
                "meta": []
              },
              {
                "name": "page",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "num",
                    "type": "integer",
                    "description": "Current page number",
                    "meta": []
                  },
                  {
                    "name": "size",
                    "type": "integer",
                    "description": "Number of items per page",
                    "meta": []
                  }
                ]
              },
              {
                "name": "sessions",
                "type": "$$array",
                "description": "List of session objects",
                "meta": [],
                "properties": [],
                "ofProperty": {
                  "name": "",
                  "type": "object",
                  "properties": [
                    {
                      "name": "id",
                      "type": "string",
                      "description": "Unique identifier for the session",
                      "meta": []
                    },
                    {
                      "name": "website_id",
                      "type": "string",
                      "description": "ID of the website where the session was recorded",
                      "meta": []
                    },
                    {
                      "name": "session_url",
                      "type": "string",
                      "description": "URL to view the session in LiveSession dashboard",
                      "meta": []
                    },
                    {
                      "name": "creation_timestamp",
                      "type": "integer",
                      "description": "Unix timestamp when the session was created",
                      "meta": []
                    },
                    {
                      "name": "duration",
                      "type": "integer",
                      "description": "Total duration of the session in seconds",
                      "meta": []
                    },
                    {
                      "name": "end_timestamp",
                      "type": "integer",
                      "description": "Unix timestamp when the session ended",
                      "meta": []
                    },
                    {
                      "name": "active_time",
                      "type": "integer",
                      "description": "Total time the user was actively interacting with the page in seconds",
                      "meta": []
                    },
                    {
                      "name": "end_url",
                      "type": "string",
                      "description": "The last URL visited during the session",
                      "meta": []
                    },
                    {
                      "name": "expiration_timestamp",
                      "type": "integer",
                      "description": "Unix timestamp when the session recording will expire",
                      "meta": []
                    },
                    {
                      "name": "last_event_timestamp",
                      "type": "integer",
                      "description": "Unix timestamp of the last event recorded in the session",
                      "meta": []
                    },
                    {
                      "name": "product",
                      "type": "string",
                      "description": "Product identifier associated with the session",
                      "meta": []
                    },
                    {
                      "name": "device",
                      "type": "string",
                      "description": "Device type (e.g., desktop, mobile, tablet)",
                      "meta": []
                    },
                    {
                      "name": "tags",
                      "type": "$$array",
                      "description": "Custom tags associated with the session",
                      "meta": [],
                      "properties": [],
                      "ofProperty": {
                        "name": "",
                        "type": "string",
                        "properties": [],
                        "description": "",
                        "meta": []
                      }
                    },
                    {
                      "name": "last_seen_page_view_id",
                      "type": "string",
                      "description": "ID of the last page view in the session",
                      "meta": []
                    },
                    {
                      "name": "seen",
                      "type": "boolean",
                      "description": "Whether the session has been viewed in the dashboard",
                      "meta": []
                    },
                    {
                      "name": "referrer",
                      "type": "string",
                      "description": "URL where the user came from before starting the session",
                      "meta": []
                    },
                    {
                      "name": "start_url",
                      "type": "string",
                      "description": "First URL visited during the session",
                      "meta": []
                    },
                    {
                      "name": "visitor_first_session",
                      "type": "boolean",
                      "description": "Whether this is the visitor's first session",
                      "meta": []
                    },
                    {
                      "name": "engagment_score",
                      "type": "number",
                      "description": "Calculated engagement score for the session (0-100)",
                      "meta": []
                    },
                    {
                      "name": "visitor",
                      "type": "object",
                      "description": "",
                      "meta": [],
                      "properties": [
                        {
                          "name": "id",
                          "type": "string",
                          "description": "Unique identifier for the visitor",
                          "meta": []
                        },
                        {
                          "name": "ip",
                          "type": "string",
                          "description": "IP address of the visitor",
                          "meta": []
                        },
                        {
                          "name": "geolocation",
                          "type": "object",
                          "description": "",
                          "meta": [],
                          "properties": [
                            {
                              "name": "country_code",
                              "type": "string",
                              "description": "Two-letter country code (ISO 3166-1 alpha-2)",
                              "meta": []
                            },
                            {
                              "name": "city",
                              "type": "string",
                              "description": "City name",
                              "meta": []
                            },
                            {
                              "name": "region",
                              "type": "string",
                              "description": "Region or state name",
                              "meta": []
                            }
                          ]
                        },
                        {
                          "name": "name",
                          "type": "string",
                          "description": "Name of the visitor if identified",
                          "meta": []
                        },
                        {
                          "name": "email",
                          "type": "string",
                          "description": "Email address of the visitor if identified",
                          "meta": []
                        },
                        {
                          "name": "email_hash",
                          "type": "string",
                          "description": "Hashed version of the visitor's email for privacy",
                          "meta": []
                        },
                        {
                          "name": "params",
                          "type": "$$array",
                          "description": "Custom parameters associated with the visitor",
                          "meta": [],
                          "properties": [],
                          "ofProperty": {
                            "name": "",
                            "type": "object",
                            "properties": [
                              {
                                "name": "name",
                                "type": "string",
                                "description": "Parameter name",
                                "meta": []
                              },
                              {
                                "name": "value",
                                "type": "string",
                                "description": "Parameter value",
                                "meta": []
                              }
                            ],
                            "description": "",
                            "meta": []
                          }
                        },
                        {
                          "name": "last_session_timestamp",
                          "type": "integer",
                          "description": "Unix timestamp of the visitor's last session",
                          "meta": []
                        },
                        {
                          "name": "first_session_timestamp",
                          "type": "integer",
                          "description": "Unix timestamp of the visitor's first session",
                          "meta": []
                        }
                      ]
                    },
                    {
                      "name": "resolution",
                      "type": "object",
                      "description": "",
                      "meta": [],
                      "properties": [
                        {
                          "name": "height",
                          "type": "integer",
                          "description": "Screen height in pixels",
                          "meta": []
                        },
                        {
                          "name": "width",
                          "type": "integer",
                          "description": "Screen width in pixels",
                          "meta": []
                        },
                        {
                          "name": "resolution",
                          "type": "string",
                          "description": "Screen resolution (e.g., \"1920x1080\")",
                          "meta": []
                        }
                      ]
                    },
                    {
                      "name": "os",
                      "type": "object",
                      "description": "",
                      "meta": [],
                      "properties": [
                        {
                          "name": "name",
                          "type": "string",
                          "description": "Operating system name (e.g., Windows, macOS, iOS)",
                          "meta": []
                        },
                        {
                          "name": "version",
                          "type": "string",
                          "description": "Operating system version",
                          "meta": []
                        }
                      ]
                    },
                    {
                      "name": "browser",
                      "type": "object",
                      "description": "",
                      "meta": [],
                      "properties": [
                        {
                          "name": "description",
                          "type": "string",
                          "description": "Full browser description string",
                          "meta": []
                        },
                        {
                          "name": "name",
                          "type": "string",
                          "description": "Browser name (e.g., Chrome, Firefox, Safari)",
                          "meta": []
                        },
                        {
                          "name": "version",
                          "type": "string",
                          "description": "Browser version",
                          "meta": []
                        }
                      ]
                    },
                    {
                      "name": "utm",
                      "type": "object",
                      "description": "",
                      "meta": [],
                      "properties": [
                        {
                          "name": "source",
                          "type": "string",
                          "description": "UTM source parameter (e.g., google, facebook)",
                          "meta": []
                        },
                        {
                          "name": "medium",
                          "type": "string",
                          "description": "UTM medium parameter (e.g., cpc, social)",
                          "meta": []
                        },
                        {
                          "name": "campaign",
                          "type": "string",
                          "description": "UTM campaign parameter",
                          "meta": []
                        },
                        {
                          "name": "term",
                          "type": "string",
                          "description": "UTM term parameter (search keywords)",
                          "meta": []
                        },
                        {
                          "name": "content",
                          "type": "string",
                          "description": "UTM content parameter",
                          "meta": []
                        }
                      ]
                    },
                    {
                      "name": "page_views_statistics",
                      "type": "object",
                      "description": "",
                      "meta": [],
                      "properties": [
                        {
                          "name": "count",
                          "type": "integer",
                          "description": "Total number of page views in the session",
                          "meta": []
                        }
                      ]
                    },
                    {
                      "name": "events_statistics",
                      "type": "object",
                      "description": "",
                      "meta": [],
                      "properties": [
                        {
                          "name": "clicks",
                          "type": "integer",
                          "description": "Total number of clicks during the session",
                          "meta": []
                        },
                        {
                          "name": "error_clicks",
                          "type": "integer",
                          "description": "Number of clicks on error elements",
                          "meta": []
                        },
                        {
                          "name": "rage_clicks",
                          "type": "integer",
                          "description": "Number of rapid clicks indicating user frustration",
                          "meta": []
                        },
                        {
                          "name": "error_logs",
                          "type": "integer",
                          "description": "Number of JavaScript errors logged",
                          "meta": []
                        },
                        {
                          "name": "net_errors",
                          "type": "integer",
                          "description": "Number of network errors encountered",
                          "meta": []
                        }
                      ]
                    }
                  ],
                  "description": "",
                  "meta": []
                }
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Get all alerts",
    "canonical": "get-all-alerts",
    "description": "---\ntitle: List alerts\ngroup: [Endpoints]\n---\n\nList of all alerts\n",
    "type": "rest_get",
    "category": "rest",
    "context": {
      "method": "get",
      "path": "/alerts",
      "group": [
        "Alerts"
      ],
      "fullPath": "https:/api.livesession.io/v1/alerts",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "alerts:read"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request GET \\\n     --url https://api.livesession.io/v1/alerts \\\n     --header 'accept: application/json'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('https://api.livesession.io/v1/alerts', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/alerts\"\n\nheaders = {\"accept\": \"application/json\"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/alerts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "[\n  {\n    \"alert_id\": \"string\",\n    \"name\": \"string\",\n    \"events\": [\n      {\n        \"kind\": 0,\n        \"value\": \"string\"\n      }\n    ],\n    \"provider\": \"slack\",\n    \"slack_channel_id\": \"string\",\n    \"webhook_id\": \"string\",\n    \"enabled\": true,\n    \"creation_date\": \"string\"\n  }\n]"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "OK",
            "properties": [],
            "rootProperty": {
              "type": "$$array",
              "properties": [
                {
                  "name": "alert_id",
                  "type": "string",
                  "description": "Unique identifier for the alert",
                  "meta": []
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of the alert",
                  "meta": []
                },
                {
                  "name": "events",
                  "type": "$$array",
                  "description": "List of events that trigger the alert",
                  "meta": [],
                  "properties": [],
                  "ofProperty": {
                    "name": "",
                    "type": "object",
                    "properties": [
                      {
                        "name": "kind",
                        "type": "integer",
                        "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
                        "meta": []
                      },
                      {
                        "name": "value",
                        "type": "string",
                        "description": "Value or threshold that triggers the alert",
                        "meta": []
                      }
                    ],
                    "description": "",
                    "meta": []
                  }
                },
                {
                  "name": "provider",
                  "type": "$$enum",
                  "description": "Notification provider for the alert",
                  "meta": [
                    {
                      "name": "enum-type",
                      "value": "string"
                    }
                  ],
                  "properties": [
                    {
                      "name": "slack",
                      "type": "string",
                      "description": "",
                      "meta": []
                    },
                    {
                      "name": "webhooks",
                      "type": "string",
                      "description": "",
                      "meta": []
                    }
                  ],
                  "ofProperty": {
                    "name": "",
                    "description": "",
                    "type": "string"
                  }
                },
                {
                  "name": "slack_channel_id",
                  "type": "string",
                  "description": "Slack channel ID for notifications",
                  "meta": []
                },
                {
                  "name": "webhook_id",
                  "type": "string",
                  "description": "Webhook ID for notifications",
                  "meta": []
                },
                {
                  "name": "enabled",
                  "type": "boolean",
                  "description": "Whether the alert is currently active",
                  "meta": []
                },
                {
                  "name": "creation_date",
                  "type": "string",
                  "description": "[ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp when the alert was created\n",
                  "meta": []
                }
              ]
            },
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Create an alert",
    "canonical": "create-an-alert",
    "description": "---\ntitle: Create alert\ngroup: [Endpoints]\n---\n\nCreate alert\n",
    "type": "rest_post",
    "category": "rest",
    "context": {
      "method": "post",
      "path": "/alerts",
      "group": [
        "Alerts"
      ],
      "fullPath": "https:/api.livesession.io/v1/alerts",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "alerts:write"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request POST \\\n     --url https://api.livesession.io/v1/alerts \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"name\": \"string\",\n  \"events\": [\n    {\n      \"kind\": 0,\n      \"value\": \"string\"\n    }\n  ],\n  \"provider\": \"slack\",\n  \"slack_channel_id\": \"string\",\n  \"webhook_id\": \"string\"\n}\n'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    name: 'string',\n    events: [{kind: 0, value: 'string'}],\n    provider: 'slack',\n    slack_channel_id: 'string',\n    webhook_id: 'string'\n  })\n};\n\nfetch('https://api.livesession.io/v1/alerts', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/alerts\"\n\npayload = {\n    \"name\": \"string\",\n    \"events\": [\n        {\n            \"kind\": 0,\n            \"value\": \"string\"\n        }\n    ],\n    \"provider\": \"slack\",\n    \"slack_channel_id\": \"string\",\n    \"webhook_id\": \"string\"\n}\nheaders = {\n    \"accept\": \"application/json\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/alerts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"events\\\":[{\\\"kind\\\":0,\\\"value\\\":\\\"string\\\"}],\\\"provider\\\":\\\"slack\\\",\\\"slack_channel_id\\\":\\\"string\\\",\\\"webhook_id\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "201",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"alert_id\": \"string\",\n  \"name\": \"string\",\n  \"events\": [\n    {\n      \"kind\": 0,\n      \"value\": \"string\"\n    }\n  ],\n  \"provider\": \"slack\",\n  \"slack_channel_id\": \"string\",\n  \"webhook_id\": \"string\",\n  \"enabled\": true,\n  \"creation_date\": \"string\"\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Request body",
        "variants": [
          {
            "title": "application/json",
            "description": "",
            "properties": [
              {
                "name": "name",
                "type": "string",
                "description": "Name of the alert for easy identification",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              },
              {
                "name": "events",
                "type": "$$array",
                "description": "List of events that will trigger the alert",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ],
                "properties": [],
                "ofProperty": {
                  "name": "",
                  "type": "object",
                  "properties": [
                    {
                      "name": "kind",
                      "type": "integer",
                      "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
                      "meta": []
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "description": "Value or threshold that triggers the alert",
                      "meta": []
                    }
                  ],
                  "description": "",
                  "meta": [
                    {
                      "name": "required",
                      "value": "true"
                    }
                  ]
                }
              },
              {
                "name": "provider",
                "type": "$$enum",
                "description": "Notification provider for the alert, `slack` or `webhooks`",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  },
                  {
                    "name": "enum-type",
                    "value": "string"
                  }
                ],
                "properties": [
                  {
                    "name": "slack",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "webhooks",
                    "type": "string",
                    "description": "",
                    "meta": []
                  }
                ],
                "ofProperty": {
                  "name": "",
                  "description": "",
                  "type": "string"
                }
              },
              {
                "name": "slack_channel_id",
                "type": "string",
                "description": "Slack channel ID where notifications will be sent (required if provider is `slack`)",
                "meta": []
              },
              {
                "name": "webhook_id",
                "type": "string",
                "description": "Webhook ID where notifications will be sent (required if provider is `webhooks`)",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "properties": [],
        "meta": [
          {
            "name": "required",
            "value": "true"
          }
        ],
        "type": "$rest.request.body"
      },
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "201",
            "description": "Created",
            "properties": [
              {
                "name": "alert_id",
                "type": "string",
                "description": "Unique identifier for the alert",
                "meta": []
              },
              {
                "name": "name",
                "type": "string",
                "description": "Name of the alert",
                "meta": []
              },
              {
                "name": "events",
                "type": "$$array",
                "description": "List of events that trigger the alert",
                "meta": [],
                "properties": [],
                "ofProperty": {
                  "name": "",
                  "type": "object",
                  "properties": [
                    {
                      "name": "kind",
                      "type": "integer",
                      "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
                      "meta": []
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "description": "Value or threshold that triggers the alert",
                      "meta": []
                    }
                  ],
                  "description": "",
                  "meta": []
                }
              },
              {
                "name": "provider",
                "type": "$$enum",
                "description": "Notification provider for the alert",
                "meta": [
                  {
                    "name": "enum-type",
                    "value": "string"
                  }
                ],
                "properties": [
                  {
                    "name": "slack",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "webhooks",
                    "type": "string",
                    "description": "",
                    "meta": []
                  }
                ],
                "ofProperty": {
                  "name": "",
                  "description": "",
                  "type": "string"
                }
              },
              {
                "name": "slack_channel_id",
                "type": "string",
                "description": "Slack channel ID for notifications",
                "meta": []
              },
              {
                "name": "webhook_id",
                "type": "string",
                "description": "Webhook ID for notifications",
                "meta": []
              },
              {
                "name": "enabled",
                "type": "boolean",
                "description": "Whether the alert is currently active",
                "meta": []
              },
              {
                "name": "creation_date",
                "type": "string",
                "description": "[ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp when the alert was created\n",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "201"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Update an alert by ID",
    "canonical": "update-an-alert-by-id",
    "description": "---\ntitle: Update alert\ngroup: [Endpoints]\n---\n\nUpdate alert by ID\n",
    "type": "rest_put",
    "category": "rest",
    "context": {
      "method": "put",
      "path": "/alerts/{id}",
      "group": [
        "Alerts"
      ],
      "fullPath": "https:/api.livesession.io/v1/alerts/{id}",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "alerts:write"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request PUT \\\n     --url https://api.livesession.io/v1/alerts/string \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"name\": \"string\",\n  \"events\": [\n    {\n      \"kind\": 0,\n      \"value\": \"string\"\n    }\n  ],\n  \"provider\": \"slack\",\n  \"slack_channel_id\": \"string\",\n  \"webhook_id\": \"string\"\n}\n'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {\n  method: 'PUT',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    name: 'string',\n    events: [{kind: 0, value: 'string'}],\n    provider: 'slack',\n    slack_channel_id: 'string',\n    webhook_id: 'string'\n  })\n};\n\nfetch('https://api.livesession.io/v1/alerts/string', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/alerts/string\"\n\npayload = {\n    \"name\": \"string\",\n    \"events\": [\n        {\n            \"kind\": 0,\n            \"value\": \"string\"\n        }\n    ],\n    \"provider\": \"slack\",\n    \"slack_channel_id\": \"string\",\n    \"webhook_id\": \"string\"\n}\nheaders = {\n    \"accept\": \"application/json\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.put(url, json=payload, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/alerts/string\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"events\\\":[{\\\"kind\\\":0,\\\"value\\\":\\\"string\\\"}],\\\"provider\\\":\\\"slack\\\",\\\"slack_channel_id\\\":\\\"string\\\",\\\"webhook_id\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"alert_id\": \"string\",\n  \"name\": \"string\",\n  \"events\": [\n    {\n      \"kind\": 0,\n      \"value\": \"string\"\n    }\n  ],\n  \"provider\": \"slack\",\n  \"slack_channel_id\": \"string\",\n  \"webhook_id\": \"string\",\n  \"enabled\": true,\n  \"creation_date\": \"string\"\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Path parameters",
        "properties": [
          {
            "name": "id",
            "type": "string",
            "description": "Unique identifier of the alert to update",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "type": "$rest.param.path"
      },
      {
        "title": "Request body",
        "variants": [
          {
            "title": "application/json",
            "description": "",
            "properties": [
              {
                "name": "name",
                "type": "string",
                "description": "New name for the alert",
                "meta": []
              },
              {
                "name": "events",
                "type": "$$array",
                "description": "Updated list of events that will trigger the alert",
                "meta": [],
                "properties": [],
                "ofProperty": {
                  "name": "",
                  "type": "object",
                  "properties": [
                    {
                      "name": "kind",
                      "type": "integer",
                      "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
                      "meta": []
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "description": "Value or threshold that triggers the alert",
                      "meta": []
                    }
                  ],
                  "description": "",
                  "meta": []
                }
              },
              {
                "name": "provider",
                "type": "$$enum",
                "description": "Updated notification provider for the alert",
                "meta": [
                  {
                    "name": "enum-type",
                    "value": "string"
                  }
                ],
                "properties": [
                  {
                    "name": "slack",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "webhooks",
                    "type": "string",
                    "description": "",
                    "meta": []
                  }
                ],
                "ofProperty": {
                  "name": "",
                  "description": "",
                  "type": "string"
                }
              },
              {
                "name": "slack_channel_id",
                "type": "string",
                "description": "Updated Slack channel ID for notifications",
                "meta": []
              },
              {
                "name": "webhook_id",
                "type": "string",
                "description": "Updated webhook ID for notifications",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "contentType",
                "value": "application/json"
              }
            ]
          }
        ],
        "properties": [],
        "meta": [
          {
            "name": "required",
            "value": "true"
          }
        ],
        "type": "$rest.request.body"
      },
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "OK",
            "properties": [
              {
                "name": "alert_id",
                "type": "string",
                "description": "Unique identifier for the alert",
                "meta": []
              },
              {
                "name": "name",
                "type": "string",
                "description": "Name of the alert",
                "meta": []
              },
              {
                "name": "events",
                "type": "$$array",
                "description": "List of events that trigger the alert",
                "meta": [],
                "properties": [],
                "ofProperty": {
                  "name": "",
                  "type": "object",
                  "properties": [
                    {
                      "name": "kind",
                      "type": "integer",
                      "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
                      "meta": []
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "description": "Value or threshold that triggers the alert",
                      "meta": []
                    }
                  ],
                  "description": "",
                  "meta": []
                }
              },
              {
                "name": "provider",
                "type": "$$enum",
                "description": "Notification provider for the alert",
                "meta": [
                  {
                    "name": "enum-type",
                    "value": "string"
                  }
                ],
                "properties": [
                  {
                    "name": "slack",
                    "type": "string",
                    "description": "",
                    "meta": []
                  },
                  {
                    "name": "webhooks",
                    "type": "string",
                    "description": "",
                    "meta": []
                  }
                ],
                "ofProperty": {
                  "name": "",
                  "description": "",
                  "type": "string"
                }
              },
              {
                "name": "slack_channel_id",
                "type": "string",
                "description": "Slack channel ID for notifications",
                "meta": []
              },
              {
                "name": "webhook_id",
                "type": "string",
                "description": "Webhook ID for notifications",
                "meta": []
              },
              {
                "name": "enabled",
                "type": "boolean",
                "description": "Whether the alert is currently active",
                "meta": []
              },
              {
                "name": "creation_date",
                "type": "string",
                "description": "[ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp when the alert was created\n",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Delete an alert by ID",
    "canonical": "delete-an-alert-by-id",
    "description": "---\ntitle: Delete alert\ngroup: [Endpoints]\n---\n\nDelete alert by ID\n",
    "type": "rest_delete",
    "category": "rest",
    "context": {
      "method": "delete",
      "path": "/alerts/{id}",
      "group": [
        "Alerts"
      ],
      "fullPath": "https:/api.livesession.io/v1/alerts/{id}",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "alerts:write"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request DELETE \\\n     --url https://api.livesession.io/v1/alerts/string \\\n     --header 'accept: application/json'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {method: 'DELETE', headers: {accept: 'application/json'}};\n\nfetch('https://api.livesession.io/v1/alerts/string', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/alerts/string\"\n\nheaders = {\"accept\": \"application/json\"}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/alerts/string\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"alert_id\": \"string\",\n  \"deleted\": true\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Path parameters",
        "properties": [
          {
            "name": "id",
            "type": "string",
            "description": "Unique identifier of the alert to delete",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "type": "$rest.param.path"
      },
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "Alert deleted",
            "properties": [
              {
                "name": "alert_id",
                "type": "string",
                "description": "ID of the alert that was deleted",
                "meta": []
              },
              {
                "name": "deleted",
                "type": "boolean",
                "description": "Indicates whether the alert was successfully deleted",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Get a list of webhooks",
    "canonical": "get-a-list-of-webhooks",
    "description": "---\ntitle: List webhooks\ngroup: [Endpoints]\n---\n\nList of all webhooks\n",
    "type": "rest_get",
    "category": "rest",
    "context": {
      "method": "get",
      "path": "/webhooks",
      "group": [
        "Webhooks"
      ],
      "fullPath": "https:/api.livesession.io/v1/webhooks",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "webhooks:read"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request GET \\\n     --url https://api.livesession.io/v1/webhooks \\\n     --header 'accept: application/json'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('https://api.livesession.io/v1/webhooks', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/webhooks\"\n\nheaders = {\"accept\": \"application/json\"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/webhooks\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "[\n  {\n    \"webhook_id\": \"string\",\n    \"url\": \"string\",\n    \"website\": \"string\",\n    \"website_id\": \"string\",\n    \"version\": \"string\",\n    \"enabled\": true,\n    \"created_date\": 0,\n    \"created_by\": \"string\"\n  }\n]"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "List of webhooks",
            "properties": [],
            "rootProperty": {
              "type": "$$array",
              "properties": [
                {
                  "name": "webhook_id",
                  "type": "string",
                  "description": "Webhook ID",
                  "meta": []
                },
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL for the webhook",
                  "meta": []
                },
                {
                  "name": "website",
                  "type": "string",
                  "description": "Website name",
                  "meta": []
                },
                {
                  "name": "website_id",
                  "type": "string",
                  "description": "Website ID",
                  "meta": []
                },
                {
                  "name": "version",
                  "type": "string",
                  "description": "API version",
                  "meta": []
                },
                {
                  "name": "enabled",
                  "type": "boolean",
                  "description": "Webhook enabled status",
                  "meta": []
                },
                {
                  "name": "created_date",
                  "type": "integer",
                  "description": "Unix timestamp for creation date",
                  "meta": []
                },
                {
                  "name": "created_by",
                  "type": "string",
                  "description": "Creator of the webhook",
                  "meta": []
                }
              ]
            },
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Create a webhook",
    "canonical": "create-a-webhook",
    "description": "---\ntitle: Create webhook\ngroup: [Endpoints]\n---\n\nCreate a webhook\n",
    "type": "rest_post",
    "category": "rest",
    "context": {
      "method": "post",
      "path": "/webhooks",
      "group": [
        "Webhooks"
      ],
      "fullPath": "https:/api.livesession.io/v1/webhooks",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "webhooks:write"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request POST \\\n     --url https://api.livesession.io/v1/webhooks \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"url\": \"string\",\n  \"website_id\": \"string\",\n  \"version\": \"string\"\n}\n'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({url: 'string', website_id: 'string', version: 'string'})\n};\n\nfetch('https://api.livesession.io/v1/webhooks', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/webhooks\"\n\npayload = {\n    \"url\": \"string\",\n    \"website_id\": \"string\",\n    \"version\": \"string\"\n}\nheaders = {\n    \"accept\": \"application/json\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/webhooks\"\n\n\tpayload := strings.NewReader(\"{\\\"url\\\":\\\"string\\\",\\\"website_id\\\":\\\"string\\\",\\\"version\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"webhook_id\": \"string\",\n  \"url\": \"string\",\n  \"website\": \"string\",\n  \"website_id\": \"string\",\n  \"version\": \"string\",\n  \"enabled\": true,\n  \"created_date\": 0,\n  \"created_by\": \"string\"\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Request body",
        "variants": [
          {
            "title": "application/json",
            "description": "",
            "properties": [
              {
                "name": "url",
                "type": "string",
                "description": "URL for the webhook",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              },
              {
                "name": "website_id",
                "type": "string",
                "description": "Website ID",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              },
              {
                "name": "version",
                "type": "string",
                "description": "API version (e.g., v1.0)",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "properties": [],
        "meta": [
          {
            "name": "required",
            "value": "true"
          }
        ],
        "type": "$rest.request.body"
      },
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "Webhook created successfully",
            "properties": [
              {
                "name": "webhook_id",
                "type": "string",
                "description": "Webhook ID",
                "meta": []
              },
              {
                "name": "url",
                "type": "string",
                "description": "URL for the webhook",
                "meta": []
              },
              {
                "name": "website",
                "type": "string",
                "description": "Website name",
                "meta": []
              },
              {
                "name": "website_id",
                "type": "string",
                "description": "Website ID",
                "meta": []
              },
              {
                "name": "version",
                "type": "string",
                "description": "API version",
                "meta": []
              },
              {
                "name": "enabled",
                "type": "boolean",
                "description": "Webhook enabled status",
                "meta": []
              },
              {
                "name": "created_date",
                "type": "integer",
                "description": "Unix timestamp for creation date",
                "meta": []
              },
              {
                "name": "created_by",
                "type": "string",
                "description": "Creator of the webhook",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Update a webhook",
    "canonical": "update-a-webhook",
    "description": "---\ntitle: Update webhook\ngroup: [Endpoints]\n---\n\nUpdate a webhook\n",
    "type": "rest_put",
    "category": "rest",
    "context": {
      "method": "put",
      "path": "/webhooks/{id}",
      "group": [
        "Webhooks"
      ],
      "fullPath": "https:/api.livesession.io/v1/webhooks/{id}",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "webhooks:write"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request PUT \\\n     --url 'https://api.livesession.io/v1/webhooks/string?version=v1.0' \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"url\": \"string\",\n  \"website_id\": \"string\",\n  \"version\": \"string\"\n}\n'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {\n  method: 'PUT',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({url: 'string', website_id: 'string', version: 'string'})\n};\n\nfetch('https://api.livesession.io/v1/webhooks/string?version=v1.0', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/webhooks/string?version=v1.0\"\n\npayload = {\n    \"url\": \"string\",\n    \"website_id\": \"string\",\n    \"version\": \"string\"\n}\nheaders = {\n    \"accept\": \"application/json\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.put(url, json=payload, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/webhooks/string?version=v1.0\"\n\n\tpayload := strings.NewReader(\"{\\\"url\\\":\\\"string\\\",\\\"website_id\\\":\\\"string\\\",\\\"version\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"webhook_id\": \"string\",\n  \"url\": \"string\",\n  \"website\": \"string\",\n  \"website_id\": \"string\",\n  \"version\": \"string\",\n  \"enabled\": true,\n  \"created_date\": 0,\n  \"created_by\": \"string\"\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Path parameters",
        "properties": [
          {
            "name": "id",
            "type": "string",
            "description": "ID of the webhook to update",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "type": "$rest.param.path"
      },
      {
        "title": "Query parameters",
        "properties": [
          {
            "name": "version",
            "type": "$$enum",
            "description": "API version",
            "meta": [
              {
                "name": "required",
                "value": "true"
              },
              {
                "name": "enum-type",
                "value": "string"
              }
            ],
            "properties": [
              {
                "name": "v1.0",
                "type": "string",
                "description": "",
                "meta": []
              }
            ],
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "string"
            }
          }
        ],
        "type": "$rest.param.query"
      },
      {
        "title": "Request body",
        "variants": [
          {
            "title": "application/json",
            "description": "",
            "properties": [
              {
                "name": "url",
                "type": "string",
                "description": "URL for the webhook",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              },
              {
                "name": "website_id",
                "type": "string",
                "description": "Website ID",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              },
              {
                "name": "version",
                "type": "string",
                "description": "API version (e.g., v1.0)",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "properties": [],
        "meta": [
          {
            "name": "required",
            "value": "true"
          }
        ],
        "type": "$rest.request.body"
      },
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "Webhook updated successfully",
            "properties": [
              {
                "name": "webhook_id",
                "type": "string",
                "description": "Webhook ID",
                "meta": []
              },
              {
                "name": "url",
                "type": "string",
                "description": "URL for the webhook",
                "meta": []
              },
              {
                "name": "website",
                "type": "string",
                "description": "Website name",
                "meta": []
              },
              {
                "name": "website_id",
                "type": "string",
                "description": "Website ID",
                "meta": []
              },
              {
                "name": "version",
                "type": "string",
                "description": "API version",
                "meta": []
              },
              {
                "name": "enabled",
                "type": "boolean",
                "description": "Webhook enabled status",
                "meta": []
              },
              {
                "name": "created_date",
                "type": "integer",
                "description": "Unix timestamp for creation date",
                "meta": []
              },
              {
                "name": "created_by",
                "type": "string",
                "description": "Creator of the webhook",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "404",
            "description": "404 response",
            "properties": [],
            "meta": [
              {
                "name": "status",
                "value": "404"
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Delete a webhook",
    "canonical": "delete-a-webhook",
    "description": "---\ntitle: Delete webhook\ngroup: [Endpoints]\n---\n\nDelete a webhook\n",
    "type": "rest_delete",
    "category": "rest",
    "context": {
      "method": "delete",
      "path": "/webhooks/{id}",
      "group": [
        "Webhooks"
      ],
      "fullPath": "https:/api.livesession.io/v1/webhooks/{id}",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "webhooks:write"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request DELETE \\\n     --url https://api.livesession.io/v1/webhooks/string \\\n     --header 'accept: application/json'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {method: 'DELETE', headers: {accept: 'application/json'}};\n\nfetch('https://api.livesession.io/v1/webhooks/string', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/webhooks/string\"\n\nheaders = {\"accept\": \"application/json\"}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/webhooks/string\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"webhook_id\": \"string\",\n  \"deleted\": true\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Path parameters",
        "properties": [
          {
            "name": "id",
            "type": "string",
            "description": "ID of the webhook to delete",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "type": "$rest.param.path"
      },
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "Webhook deleted successfully",
            "properties": [
              {
                "name": "webhook_id",
                "type": "string",
                "description": "Webhook ID",
                "meta": []
              },
              {
                "name": "deleted",
                "type": "boolean",
                "description": "Indicates if the webhook was deleted",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "404",
            "description": "404 response",
            "properties": [],
            "meta": [
              {
                "name": "status",
                "value": "404"
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Get a list of websites",
    "canonical": "get-a-list-of-websites",
    "description": "---\ntitle: List websites\ngroup: [Endpoints]\n---\n\nList of all websites\n",
    "type": "rest_get",
    "category": "rest",
    "context": {
      "method": "get",
      "path": "/websites",
      "group": [
        "Websites"
      ],
      "fullPath": "https:/api.livesession.io/v1/websites",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "websites:read"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request GET \\\n     --url https://api.livesession.io/v1/websites \\\n     --header 'accept: application/json'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('https://api.livesession.io/v1/websites', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/websites\"\n\nheaders = {\"accept\": \"application/json\"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/websites\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "[\n  {\n    \"website_id\": \"string\",\n    \"host\": \"string\"\n  }\n]"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "List of websites",
            "properties": [],
            "rootProperty": {
              "type": "$$array",
              "properties": [
                {
                  "name": "website_id",
                  "type": "string",
                  "description": "Unique identifier for the website",
                  "meta": []
                },
                {
                  "name": "host",
                  "type": "string",
                  "description": "Domain name or hostname of the website (e.g., example.com)",
                  "meta": []
                }
              ]
            },
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "Create a website",
    "canonical": "create-a-website",
    "description": "---\ntitle: Create website\ngroup: [Endpoints]\n---\n\nCreate a website\n",
    "type": "rest_post",
    "category": "rest",
    "context": {
      "method": "post",
      "path": "/websites",
      "group": [
        "Websites"
      ],
      "fullPath": "https:/api.livesession.io/v1/websites",
      "servers": [
        "https://api.livesession.io/v1"
      ],
      "scopes": [
        "websites:write"
      ]
    },
    "examples": {
      "groups": [
        {
          "description": "Example request",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "shell",
                    "language": "shell",
                    "code": "curl --request POST \\\n     --url https://api.livesession.io/v1/websites \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"host\": \"string\",\n  \"description\": \"string\"\n}\n'"
                  },
                  {
                    "title": "javascript",
                    "language": "javascript",
                    "code": "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({host: 'string', description: 'string'})\n};\n\nfetch('https://api.livesession.io/v1/websites', options)\n  .then(res => res.json())\n  .then(res => console.log(res))\n  .catch(err => console.error(err));"
                  },
                  {
                    "title": "python",
                    "language": "python",
                    "code": "import requests\n\nurl = \"https://api.livesession.io/v1/websites\"\n\npayload = {\n    \"host\": \"string\",\n    \"description\": \"string\"\n}\nheaders = {\n    \"accept\": \"application/json\",\n    \"content-type\": \"application/json\"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)"
                  },
                  {
                    "title": "go",
                    "language": "go",
                    "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io\"\n)\n\nfunc main() {\n\n\turl := \"https://api.livesession.io/v1/websites\"\n\n\tpayload := strings.NewReader(\"{\\\"host\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := io.ReadAll(res.Body)\n\n\tfmt.Println(string(body))\n\n}"
                  }
                ]
              }
            }
          ]
        },
        {
          "description": "Example response",
          "examples": [
            {
              "codeblock": {
                "title": "200",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"website_id\": \"string\",\n  \"host\": \"string\"\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "400",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            },
            {
              "codeblock": {
                "title": "500",
                "tabs": [
                  {
                    "title": "application/json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"string\",\n    \"code\": \"string\",\n    \"param\": \"string\",\n    \"message\": \"string\",\n    \"http_status_code\": 0,\n    \"request_id\": \"string\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "definitions": [
      {
        "title": "Request body",
        "variants": [
          {
            "title": "application/json",
            "description": "",
            "properties": [
              {
                "name": "host",
                "type": "string",
                "description": "Domain name or hostname of the website to track",
                "meta": [
                  {
                    "name": "required",
                    "value": "true"
                  }
                ]
              },
              {
                "name": "description",
                "type": "string",
                "description": "Optional description of the website for organization purposes",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "properties": [],
        "meta": [
          {
            "name": "required",
            "value": "true"
          }
        ],
        "type": "$rest.request.body"
      },
      {
        "title": "Response",
        "type": "return",
        "variants": [
          {
            "title": "200",
            "description": "Create a website",
            "properties": [
              {
                "name": "website_id",
                "type": "string",
                "description": "Unique identifier for the website",
                "meta": []
              },
              {
                "name": "host",
                "type": "string",
                "description": "Domain name or hostname of the website (e.g., example.com)",
                "meta": []
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "200"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "400",
            "description": "400 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "400"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          },
          {
            "title": "500",
            "description": "500 response",
            "properties": [
              {
                "name": "error",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "type",
                    "type": "string",
                    "description": "Type of error (e.g., validation_error, authentication_error)",
                    "meta": []
                  },
                  {
                    "name": "code",
                    "type": "string",
                    "description": "Machine-readable error code",
                    "meta": []
                  },
                  {
                    "name": "param",
                    "type": "string",
                    "description": "Name of the parameter that caused the error",
                    "meta": []
                  },
                  {
                    "name": "message",
                    "type": "string",
                    "description": "Human-readable error message",
                    "meta": []
                  },
                  {
                    "name": "http_status_code",
                    "type": "integer",
                    "description": "HTTP status code associated with the error",
                    "meta": []
                  },
                  {
                    "name": "request_id",
                    "type": "string",
                    "description": "Unique identifier for the request that caused the error",
                    "meta": []
                  }
                ]
              }
            ],
            "meta": [
              {
                "name": "status",
                "value": "500"
              },
              {
                "name": "contentType",
                "value": "application/json"
              },
              {
                "name": "definitionDescription",
                "value": ""
              }
            ]
          }
        ],
        "properties": []
      }
    ]
  },
  {
    "title": "ErrorResponse",
    "description": "",
    "canonical": "objects/ErrorResponse",
    "definitions": [
      {
        "title": "ErrorResponse",
        "properties": [
          {
            "name": "error",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "type",
                "type": "string",
                "description": "Type of error (e.g., validation_error, authentication_error)",
                "meta": []
              },
              {
                "name": "code",
                "type": "string",
                "description": "Machine-readable error code",
                "meta": []
              },
              {
                "name": "param",
                "type": "string",
                "description": "Name of the parameter that caused the error",
                "meta": []
              },
              {
                "name": "message",
                "type": "string",
                "description": "Human-readable error message",
                "meta": []
              },
              {
                "name": "http_status_code",
                "type": "integer",
                "description": "HTTP status code associated with the error",
                "meta": []
              },
              {
                "name": "request_id",
                "type": "string",
                "description": "Unique identifier for the request that caused the error",
                "meta": []
              }
            ]
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"error\": {\n    \"type\": \"\",\n    \"code\": \"\",\n    \"param\": \"\",\n    \"message\": \"\",\n    \"http_status_code\": 0,\n    \"request_id\": \"\"\n  }\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "ErrorResponse",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "Session",
    "description": "",
    "canonical": "objects/Session",
    "definitions": [
      {
        "title": "Session",
        "properties": [
          {
            "name": "id",
            "type": "string",
            "description": "Unique identifier for the session",
            "meta": []
          },
          {
            "name": "website_id",
            "type": "string",
            "description": "ID of the website where the session was recorded",
            "meta": []
          },
          {
            "name": "session_url",
            "type": "string",
            "description": "URL to view the session in LiveSession dashboard",
            "meta": []
          },
          {
            "name": "creation_timestamp",
            "type": "integer",
            "description": "Unix timestamp when the session was created",
            "meta": []
          },
          {
            "name": "duration",
            "type": "integer",
            "description": "Total duration of the session in seconds",
            "meta": []
          },
          {
            "name": "end_timestamp",
            "type": "integer",
            "description": "Unix timestamp when the session ended",
            "meta": []
          },
          {
            "name": "active_time",
            "type": "integer",
            "description": "Total time the user was actively interacting with the page in seconds",
            "meta": []
          },
          {
            "name": "end_url",
            "type": "string",
            "description": "The last URL visited during the session",
            "meta": []
          },
          {
            "name": "expiration_timestamp",
            "type": "integer",
            "description": "Unix timestamp when the session recording will expire",
            "meta": []
          },
          {
            "name": "last_event_timestamp",
            "type": "integer",
            "description": "Unix timestamp of the last event recorded in the session",
            "meta": []
          },
          {
            "name": "product",
            "type": "string",
            "description": "Product identifier associated with the session",
            "meta": []
          },
          {
            "name": "device",
            "type": "string",
            "description": "Device type (e.g., desktop, mobile, tablet)",
            "meta": []
          },
          {
            "name": "tags",
            "type": "$$array",
            "description": "Custom tags associated with the session",
            "meta": [],
            "properties": [],
            "ofProperty": {
              "name": "",
              "type": "string",
              "properties": [],
              "description": "",
              "meta": []
            }
          },
          {
            "name": "last_seen_page_view_id",
            "type": "string",
            "description": "ID of the last page view in the session",
            "meta": []
          },
          {
            "name": "seen",
            "type": "boolean",
            "description": "Whether the session has been viewed in the dashboard",
            "meta": []
          },
          {
            "name": "referrer",
            "type": "string",
            "description": "URL where the user came from before starting the session",
            "meta": []
          },
          {
            "name": "start_url",
            "type": "string",
            "description": "First URL visited during the session",
            "meta": []
          },
          {
            "name": "visitor_first_session",
            "type": "boolean",
            "description": "Whether this is the visitor's first session",
            "meta": []
          },
          {
            "name": "engagment_score",
            "type": "number",
            "description": "Calculated engagement score for the session (0-100)",
            "meta": []
          },
          {
            "name": "visitor",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "id",
                "type": "string",
                "description": "Unique identifier for the visitor",
                "meta": []
              },
              {
                "name": "ip",
                "type": "string",
                "description": "IP address of the visitor",
                "meta": []
              },
              {
                "name": "geolocation",
                "type": "object",
                "description": "",
                "meta": [],
                "properties": [
                  {
                    "name": "country_code",
                    "type": "string",
                    "description": "Two-letter country code (ISO 3166-1 alpha-2)",
                    "meta": []
                  },
                  {
                    "name": "city",
                    "type": "string",
                    "description": "City name",
                    "meta": []
                  },
                  {
                    "name": "region",
                    "type": "string",
                    "description": "Region or state name",
                    "meta": []
                  }
                ]
              },
              {
                "name": "name",
                "type": "string",
                "description": "Name of the visitor if identified",
                "meta": []
              },
              {
                "name": "email",
                "type": "string",
                "description": "Email address of the visitor if identified",
                "meta": []
              },
              {
                "name": "email_hash",
                "type": "string",
                "description": "Hashed version of the visitor's email for privacy",
                "meta": []
              },
              {
                "name": "params",
                "type": "$$array",
                "description": "Custom parameters associated with the visitor",
                "meta": [],
                "properties": [],
                "ofProperty": {
                  "name": "",
                  "type": "object",
                  "properties": [
                    {
                      "name": "name",
                      "type": "string",
                      "description": "Parameter name",
                      "meta": []
                    },
                    {
                      "name": "value",
                      "type": "string",
                      "description": "Parameter value",
                      "meta": []
                    }
                  ],
                  "description": "",
                  "meta": []
                }
              },
              {
                "name": "last_session_timestamp",
                "type": "integer",
                "description": "Unix timestamp of the visitor's last session",
                "meta": []
              },
              {
                "name": "first_session_timestamp",
                "type": "integer",
                "description": "Unix timestamp of the visitor's first session",
                "meta": []
              }
            ]
          },
          {
            "name": "resolution",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "height",
                "type": "integer",
                "description": "Screen height in pixels",
                "meta": []
              },
              {
                "name": "width",
                "type": "integer",
                "description": "Screen width in pixels",
                "meta": []
              },
              {
                "name": "resolution",
                "type": "string",
                "description": "Screen resolution (e.g., \"1920x1080\")",
                "meta": []
              }
            ]
          },
          {
            "name": "os",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "name",
                "type": "string",
                "description": "Operating system name (e.g., Windows, macOS, iOS)",
                "meta": []
              },
              {
                "name": "version",
                "type": "string",
                "description": "Operating system version",
                "meta": []
              }
            ]
          },
          {
            "name": "browser",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "description",
                "type": "string",
                "description": "Full browser description string",
                "meta": []
              },
              {
                "name": "name",
                "type": "string",
                "description": "Browser name (e.g., Chrome, Firefox, Safari)",
                "meta": []
              },
              {
                "name": "version",
                "type": "string",
                "description": "Browser version",
                "meta": []
              }
            ]
          },
          {
            "name": "utm",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "source",
                "type": "string",
                "description": "UTM source parameter (e.g., google, facebook)",
                "meta": []
              },
              {
                "name": "medium",
                "type": "string",
                "description": "UTM medium parameter (e.g., cpc, social)",
                "meta": []
              },
              {
                "name": "campaign",
                "type": "string",
                "description": "UTM campaign parameter",
                "meta": []
              },
              {
                "name": "term",
                "type": "string",
                "description": "UTM term parameter (search keywords)",
                "meta": []
              },
              {
                "name": "content",
                "type": "string",
                "description": "UTM content parameter",
                "meta": []
              }
            ]
          },
          {
            "name": "page_views_statistics",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "count",
                "type": "integer",
                "description": "Total number of page views in the session",
                "meta": []
              }
            ]
          },
          {
            "name": "events_statistics",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "clicks",
                "type": "integer",
                "description": "Total number of clicks during the session",
                "meta": []
              },
              {
                "name": "error_clicks",
                "type": "integer",
                "description": "Number of clicks on error elements",
                "meta": []
              },
              {
                "name": "rage_clicks",
                "type": "integer",
                "description": "Number of rapid clicks indicating user frustration",
                "meta": []
              },
              {
                "name": "error_logs",
                "type": "integer",
                "description": "Number of JavaScript errors logged",
                "meta": []
              },
              {
                "name": "net_errors",
                "type": "integer",
                "description": "Number of network errors encountered",
                "meta": []
              }
            ]
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"id\": \"\",\n  \"website_id\": \"\",\n  \"session_url\": \"\",\n  \"creation_timestamp\": 0,\n  \"duration\": 0,\n  \"end_timestamp\": 0,\n  \"active_time\": 0,\n  \"end_url\": \"\",\n  \"expiration_timestamp\": 0,\n  \"last_event_timestamp\": 0,\n  \"product\": \"\",\n  \"device\": \"\",\n  \"tags\": [],\n  \"last_seen_page_view_id\": \"\",\n  \"seen\": false,\n  \"referrer\": \"\",\n  \"start_url\": \"\",\n  \"visitor_first_session\": false,\n  \"engagment_score\": 0,\n  \"visitor\": {\n    \"id\": \"\",\n    \"ip\": \"\",\n    \"geolocation\": {\n      \"country_code\": \"\",\n      \"city\": \"\",\n      \"region\": \"\"\n    },\n    \"name\": \"\",\n    \"email\": \"\",\n    \"email_hash\": \"\",\n    \"params\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"last_session_timestamp\": 0,\n    \"first_session_timestamp\": 0,\n    \"__UNSAFE_refPath\": null\n  },\n  \"resolution\": {\n    \"height\": 0,\n    \"width\": 0,\n    \"resolution\": \"\"\n  },\n  \"os\": {\n    \"name\": \"\",\n    \"version\": \"\"\n  },\n  \"browser\": {\n    \"description\": \"\",\n    \"name\": \"\",\n    \"version\": \"\"\n  },\n  \"utm\": {\n    \"source\": \"\",\n    \"medium\": \"\",\n    \"campaign\": \"\",\n    \"term\": \"\",\n    \"content\": \"\"\n  },\n  \"page_views_statistics\": {\n    \"count\": 0\n  },\n  \"events_statistics\": {\n    \"clicks\": 0,\n    \"error_clicks\": 0,\n    \"rage_clicks\": 0,\n    \"error_logs\": 0,\n    \"net_errors\": 0\n  },\n  \"__UNSAFE_refPath\": null\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "Session",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionVisitorData",
    "description": "",
    "canonical": "objects/SessionVisitorData",
    "definitions": [
      {
        "title": "SessionVisitorData",
        "properties": [
          {
            "name": "id",
            "type": "string",
            "description": "Unique identifier for the visitor",
            "meta": []
          },
          {
            "name": "ip",
            "type": "string",
            "description": "IP address of the visitor",
            "meta": []
          },
          {
            "name": "geolocation",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "country_code",
                "type": "string",
                "description": "Two-letter country code (ISO 3166-1 alpha-2)",
                "meta": []
              },
              {
                "name": "city",
                "type": "string",
                "description": "City name",
                "meta": []
              },
              {
                "name": "region",
                "type": "string",
                "description": "Region or state name",
                "meta": []
              }
            ]
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the visitor if identified",
            "meta": []
          },
          {
            "name": "email",
            "type": "string",
            "description": "Email address of the visitor if identified",
            "meta": []
          },
          {
            "name": "email_hash",
            "type": "string",
            "description": "Hashed version of the visitor's email for privacy",
            "meta": []
          },
          {
            "name": "params",
            "type": "$$array",
            "description": "Custom parameters associated with the visitor",
            "meta": [],
            "properties": [],
            "ofProperty": {
              "name": "",
              "type": "object",
              "properties": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Parameter name",
                  "meta": []
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Parameter value",
                  "meta": []
                }
              ],
              "description": "",
              "meta": []
            }
          },
          {
            "name": "last_session_timestamp",
            "type": "integer",
            "description": "Unix timestamp of the visitor's last session",
            "meta": []
          },
          {
            "name": "first_session_timestamp",
            "type": "integer",
            "description": "Unix timestamp of the visitor's first session",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"id\": \"\",\n  \"ip\": \"\",\n  \"geolocation\": {\n    \"country_code\": \"\",\n    \"city\": \"\",\n    \"region\": \"\"\n  },\n  \"name\": \"\",\n  \"email\": \"\",\n  \"email_hash\": \"\",\n  \"params\": [\n    {\n      \"name\": \"\",\n      \"value\": \"\"\n    }\n  ],\n  \"last_session_timestamp\": 0,\n  \"first_session_timestamp\": 0,\n  \"__UNSAFE_refPath\": null\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionVisitorData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionOsData",
    "description": "",
    "canonical": "objects/SessionOsData",
    "definitions": [
      {
        "title": "SessionOsData",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "description": "Operating system name (e.g., Windows, macOS, iOS)",
            "meta": []
          },
          {
            "name": "version",
            "type": "string",
            "description": "Operating system version",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"name\": \"\",\n  \"version\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionOsData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionBrowserData",
    "description": "",
    "canonical": "objects/SessionBrowserData",
    "definitions": [
      {
        "title": "SessionBrowserData",
        "properties": [
          {
            "name": "description",
            "type": "string",
            "description": "Full browser description string",
            "meta": []
          },
          {
            "name": "name",
            "type": "string",
            "description": "Browser name (e.g., Chrome, Firefox, Safari)",
            "meta": []
          },
          {
            "name": "version",
            "type": "string",
            "description": "Browser version",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"description\": \"\",\n  \"name\": \"\",\n  \"version\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionBrowserData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionUTMData",
    "description": "",
    "canonical": "objects/SessionUTMData",
    "definitions": [
      {
        "title": "SessionUTMData",
        "properties": [
          {
            "name": "source",
            "type": "string",
            "description": "UTM source parameter (e.g., google, facebook)",
            "meta": []
          },
          {
            "name": "medium",
            "type": "string",
            "description": "UTM medium parameter (e.g., cpc, social)",
            "meta": []
          },
          {
            "name": "campaign",
            "type": "string",
            "description": "UTM campaign parameter",
            "meta": []
          },
          {
            "name": "term",
            "type": "string",
            "description": "UTM term parameter (search keywords)",
            "meta": []
          },
          {
            "name": "content",
            "type": "string",
            "description": "UTM content parameter",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"source\": \"\",\n  \"medium\": \"\",\n  \"campaign\": \"\",\n  \"term\": \"\",\n  \"content\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionUTMData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionEventsStatisticsData",
    "description": "",
    "canonical": "objects/SessionEventsStatisticsData",
    "definitions": [
      {
        "title": "SessionEventsStatisticsData",
        "properties": [
          {
            "name": "clicks",
            "type": "integer",
            "description": "Total number of clicks during the session",
            "meta": []
          },
          {
            "name": "error_clicks",
            "type": "integer",
            "description": "Number of clicks on error elements",
            "meta": []
          },
          {
            "name": "rage_clicks",
            "type": "integer",
            "description": "Number of rapid clicks indicating user frustration",
            "meta": []
          },
          {
            "name": "error_logs",
            "type": "integer",
            "description": "Number of JavaScript errors logged",
            "meta": []
          },
          {
            "name": "net_errors",
            "type": "integer",
            "description": "Number of network errors encountered",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"clicks\": 0,\n  \"error_clicks\": 0,\n  \"rage_clicks\": 0,\n  \"error_logs\": 0,\n  \"net_errors\": 0\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionEventsStatisticsData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionPageViewLocationData",
    "description": "",
    "canonical": "objects/SessionPageViewLocationData",
    "definitions": [
      {
        "title": "SessionPageViewLocationData",
        "properties": [
          {
            "name": "base",
            "type": "string",
            "description": "Base URL of the page",
            "meta": []
          },
          {
            "name": "href",
            "type": "string",
            "description": "Full URL of the page",
            "meta": []
          },
          {
            "name": "origin",
            "type": "string",
            "description": "Origin of the page (protocol + hostname)",
            "meta": []
          },
          {
            "name": "referrer",
            "type": "string",
            "description": "URL of the previous page",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"base\": \"\",\n  \"href\": \"\",\n  \"origin\": \"\",\n  \"referrer\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionPageViewLocationData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionPageViewViewPortData",
    "description": "",
    "canonical": "objects/SessionPageViewViewPortData",
    "definitions": [
      {
        "title": "SessionPageViewViewPortData",
        "properties": [
          {
            "name": "height",
            "type": "integer",
            "description": "Viewport height in pixels",
            "meta": []
          },
          {
            "name": "width",
            "type": "integer",
            "description": "Viewport width in pixels",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"height\": 0,\n  \"width\": 0\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionPageViewViewPortData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionVisitorDataGeolocation",
    "description": "",
    "canonical": "objects/SessionVisitorDataGeolocation",
    "definitions": [
      {
        "title": "SessionVisitorDataGeolocation",
        "properties": [
          {
            "name": "country_code",
            "type": "string",
            "description": "Two-letter country code (ISO 3166-1 alpha-2)",
            "meta": []
          },
          {
            "name": "city",
            "type": "string",
            "description": "City name",
            "meta": []
          },
          {
            "name": "region",
            "type": "string",
            "description": "Region or state name",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"country_code\": \"\",\n  \"city\": \"\",\n  \"region\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionVisitorDataGeolocation",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionVisitorDataParams",
    "description": "",
    "canonical": "objects/SessionVisitorDataParams",
    "definitions": [
      {
        "title": "SessionVisitorDataParams",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "description": "Parameter name",
            "meta": []
          },
          {
            "name": "value",
            "type": "string",
            "description": "Parameter value",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"name\": \"\",\n  \"value\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionVisitorDataParams",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionResolutionData",
    "description": "",
    "canonical": "objects/SessionResolutionData",
    "definitions": [
      {
        "title": "SessionResolutionData",
        "properties": [
          {
            "name": "height",
            "type": "integer",
            "description": "Screen height in pixels",
            "meta": []
          },
          {
            "name": "width",
            "type": "integer",
            "description": "Screen width in pixels",
            "meta": []
          },
          {
            "name": "resolution",
            "type": "string",
            "description": "Screen resolution (e.g., \"1920x1080\")",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"height\": 0,\n  \"width\": 0,\n  \"resolution\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionResolutionData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "SessionPageViewsStatisticsData",
    "description": "",
    "canonical": "objects/SessionPageViewsStatisticsData",
    "definitions": [
      {
        "title": "SessionPageViewsStatisticsData",
        "properties": [
          {
            "name": "count",
            "type": "integer",
            "description": "Total number of page views in the session",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"count\": 0\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "SessionPageViewsStatisticsData",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "GetListSessionsResponse",
    "description": "",
    "canonical": "objects/GetListSessionsResponse",
    "definitions": [
      {
        "title": "GetListSessionsResponse",
        "properties": [
          {
            "name": "total",
            "type": "integer",
            "description": "Total number of sessions matching the query",
            "meta": []
          },
          {
            "name": "page",
            "type": "object",
            "description": "",
            "meta": [],
            "properties": [
              {
                "name": "num",
                "type": "integer",
                "description": "Current page number",
                "meta": []
              },
              {
                "name": "size",
                "type": "integer",
                "description": "Number of items per page",
                "meta": []
              }
            ]
          },
          {
            "name": "sessions",
            "type": "$$array",
            "description": "List of session objects",
            "meta": [],
            "properties": [],
            "ofProperty": {
              "name": "",
              "type": "object",
              "properties": [
                {
                  "name": "id",
                  "type": "string",
                  "description": "Unique identifier for the session",
                  "meta": []
                },
                {
                  "name": "website_id",
                  "type": "string",
                  "description": "ID of the website where the session was recorded",
                  "meta": []
                },
                {
                  "name": "session_url",
                  "type": "string",
                  "description": "URL to view the session in LiveSession dashboard",
                  "meta": []
                },
                {
                  "name": "creation_timestamp",
                  "type": "integer",
                  "description": "Unix timestamp when the session was created",
                  "meta": []
                },
                {
                  "name": "duration",
                  "type": "integer",
                  "description": "Total duration of the session in seconds",
                  "meta": []
                },
                {
                  "name": "end_timestamp",
                  "type": "integer",
                  "description": "Unix timestamp when the session ended",
                  "meta": []
                },
                {
                  "name": "active_time",
                  "type": "integer",
                  "description": "Total time the user was actively interacting with the page in seconds",
                  "meta": []
                },
                {
                  "name": "end_url",
                  "type": "string",
                  "description": "The last URL visited during the session",
                  "meta": []
                },
                {
                  "name": "expiration_timestamp",
                  "type": "integer",
                  "description": "Unix timestamp when the session recording will expire",
                  "meta": []
                },
                {
                  "name": "last_event_timestamp",
                  "type": "integer",
                  "description": "Unix timestamp of the last event recorded in the session",
                  "meta": []
                },
                {
                  "name": "product",
                  "type": "string",
                  "description": "Product identifier associated with the session",
                  "meta": []
                },
                {
                  "name": "device",
                  "type": "string",
                  "description": "Device type (e.g., desktop, mobile, tablet)",
                  "meta": []
                },
                {
                  "name": "tags",
                  "type": "$$array",
                  "description": "Custom tags associated with the session",
                  "meta": [],
                  "properties": [],
                  "ofProperty": {
                    "name": "",
                    "type": "string",
                    "properties": [],
                    "description": "",
                    "meta": []
                  }
                },
                {
                  "name": "last_seen_page_view_id",
                  "type": "string",
                  "description": "ID of the last page view in the session",
                  "meta": []
                },
                {
                  "name": "seen",
                  "type": "boolean",
                  "description": "Whether the session has been viewed in the dashboard",
                  "meta": []
                },
                {
                  "name": "referrer",
                  "type": "string",
                  "description": "URL where the user came from before starting the session",
                  "meta": []
                },
                {
                  "name": "start_url",
                  "type": "string",
                  "description": "First URL visited during the session",
                  "meta": []
                },
                {
                  "name": "visitor_first_session",
                  "type": "boolean",
                  "description": "Whether this is the visitor's first session",
                  "meta": []
                },
                {
                  "name": "engagment_score",
                  "type": "number",
                  "description": "Calculated engagement score for the session (0-100)",
                  "meta": []
                },
                {
                  "name": "visitor",
                  "type": "object",
                  "description": "",
                  "meta": [],
                  "properties": [
                    {
                      "name": "id",
                      "type": "string",
                      "description": "Unique identifier for the visitor",
                      "meta": []
                    },
                    {
                      "name": "ip",
                      "type": "string",
                      "description": "IP address of the visitor",
                      "meta": []
                    },
                    {
                      "name": "geolocation",
                      "type": "object",
                      "description": "",
                      "meta": [],
                      "properties": [
                        {
                          "name": "country_code",
                          "type": "string",
                          "description": "Two-letter country code (ISO 3166-1 alpha-2)",
                          "meta": []
                        },
                        {
                          "name": "city",
                          "type": "string",
                          "description": "City name",
                          "meta": []
                        },
                        {
                          "name": "region",
                          "type": "string",
                          "description": "Region or state name",
                          "meta": []
                        }
                      ]
                    },
                    {
                      "name": "name",
                      "type": "string",
                      "description": "Name of the visitor if identified",
                      "meta": []
                    },
                    {
                      "name": "email",
                      "type": "string",
                      "description": "Email address of the visitor if identified",
                      "meta": []
                    },
                    {
                      "name": "email_hash",
                      "type": "string",
                      "description": "Hashed version of the visitor's email for privacy",
                      "meta": []
                    },
                    {
                      "name": "params",
                      "type": "$$array",
                      "description": "Custom parameters associated with the visitor",
                      "meta": [],
                      "properties": [],
                      "ofProperty": {
                        "name": "",
                        "type": "object",
                        "properties": [
                          {
                            "name": "name",
                            "type": "string",
                            "description": "Parameter name",
                            "meta": []
                          },
                          {
                            "name": "value",
                            "type": "string",
                            "description": "Parameter value",
                            "meta": []
                          }
                        ],
                        "description": "",
                        "meta": []
                      }
                    },
                    {
                      "name": "last_session_timestamp",
                      "type": "integer",
                      "description": "Unix timestamp of the visitor's last session",
                      "meta": []
                    },
                    {
                      "name": "first_session_timestamp",
                      "type": "integer",
                      "description": "Unix timestamp of the visitor's first session",
                      "meta": []
                    }
                  ]
                },
                {
                  "name": "resolution",
                  "type": "object",
                  "description": "",
                  "meta": [],
                  "properties": [
                    {
                      "name": "height",
                      "type": "integer",
                      "description": "Screen height in pixels",
                      "meta": []
                    },
                    {
                      "name": "width",
                      "type": "integer",
                      "description": "Screen width in pixels",
                      "meta": []
                    },
                    {
                      "name": "resolution",
                      "type": "string",
                      "description": "Screen resolution (e.g., \"1920x1080\")",
                      "meta": []
                    }
                  ]
                },
                {
                  "name": "os",
                  "type": "object",
                  "description": "",
                  "meta": [],
                  "properties": [
                    {
                      "name": "name",
                      "type": "string",
                      "description": "Operating system name (e.g., Windows, macOS, iOS)",
                      "meta": []
                    },
                    {
                      "name": "version",
                      "type": "string",
                      "description": "Operating system version",
                      "meta": []
                    }
                  ]
                },
                {
                  "name": "browser",
                  "type": "object",
                  "description": "",
                  "meta": [],
                  "properties": [
                    {
                      "name": "description",
                      "type": "string",
                      "description": "Full browser description string",
                      "meta": []
                    },
                    {
                      "name": "name",
                      "type": "string",
                      "description": "Browser name (e.g., Chrome, Firefox, Safari)",
                      "meta": []
                    },
                    {
                      "name": "version",
                      "type": "string",
                      "description": "Browser version",
                      "meta": []
                    }
                  ]
                },
                {
                  "name": "utm",
                  "type": "object",
                  "description": "",
                  "meta": [],
                  "properties": [
                    {
                      "name": "source",
                      "type": "string",
                      "description": "UTM source parameter (e.g., google, facebook)",
                      "meta": []
                    },
                    {
                      "name": "medium",
                      "type": "string",
                      "description": "UTM medium parameter (e.g., cpc, social)",
                      "meta": []
                    },
                    {
                      "name": "campaign",
                      "type": "string",
                      "description": "UTM campaign parameter",
                      "meta": []
                    },
                    {
                      "name": "term",
                      "type": "string",
                      "description": "UTM term parameter (search keywords)",
                      "meta": []
                    },
                    {
                      "name": "content",
                      "type": "string",
                      "description": "UTM content parameter",
                      "meta": []
                    }
                  ]
                },
                {
                  "name": "page_views_statistics",
                  "type": "object",
                  "description": "",
                  "meta": [],
                  "properties": [
                    {
                      "name": "count",
                      "type": "integer",
                      "description": "Total number of page views in the session",
                      "meta": []
                    }
                  ]
                },
                {
                  "name": "events_statistics",
                  "type": "object",
                  "description": "",
                  "meta": [],
                  "properties": [
                    {
                      "name": "clicks",
                      "type": "integer",
                      "description": "Total number of clicks during the session",
                      "meta": []
                    },
                    {
                      "name": "error_clicks",
                      "type": "integer",
                      "description": "Number of clicks on error elements",
                      "meta": []
                    },
                    {
                      "name": "rage_clicks",
                      "type": "integer",
                      "description": "Number of rapid clicks indicating user frustration",
                      "meta": []
                    },
                    {
                      "name": "error_logs",
                      "type": "integer",
                      "description": "Number of JavaScript errors logged",
                      "meta": []
                    },
                    {
                      "name": "net_errors",
                      "type": "integer",
                      "description": "Number of network errors encountered",
                      "meta": []
                    }
                  ]
                }
              ],
              "description": "",
              "meta": []
            }
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"total\": 0,\n  \"page\": {\n    \"num\": 0,\n    \"size\": 0\n  },\n  \"sessions\": [\n    {\n      \"id\": \"\",\n      \"website_id\": \"\",\n      \"session_url\": \"\",\n      \"creation_timestamp\": 0,\n      \"duration\": 0,\n      \"end_timestamp\": 0,\n      \"active_time\": 0,\n      \"end_url\": \"\",\n      \"expiration_timestamp\": 0,\n      \"last_event_timestamp\": 0,\n      \"product\": \"\",\n      \"device\": \"\",\n      \"tags\": [],\n      \"last_seen_page_view_id\": \"\",\n      \"seen\": false,\n      \"referrer\": \"\",\n      \"start_url\": \"\",\n      \"visitor_first_session\": false,\n      \"engagment_score\": 0,\n      \"visitor\": {\n        \"id\": \"\",\n        \"ip\": \"\",\n        \"geolocation\": {\n          \"country_code\": \"\",\n          \"city\": \"\",\n          \"region\": \"\"\n        },\n        \"name\": \"\",\n        \"email\": \"\",\n        \"email_hash\": \"\",\n        \"params\": [\n          {\n            \"name\": \"\",\n            \"value\": \"\"\n          }\n        ],\n        \"last_session_timestamp\": 0,\n        \"first_session_timestamp\": 0,\n        \"__UNSAFE_refPath\": null\n      },\n      \"resolution\": {\n        \"height\": 0,\n        \"width\": 0,\n        \"resolution\": \"\"\n      },\n      \"os\": {\n        \"name\": \"\",\n        \"version\": \"\"\n      },\n      \"browser\": {\n        \"description\": \"\",\n        \"name\": \"\",\n        \"version\": \"\"\n      },\n      \"utm\": {\n        \"source\": \"\",\n        \"medium\": \"\",\n        \"campaign\": \"\",\n        \"term\": \"\",\n        \"content\": \"\"\n      },\n      \"page_views_statistics\": {\n        \"count\": 0\n      },\n      \"events_statistics\": {\n        \"clicks\": 0,\n        \"error_clicks\": 0,\n        \"rage_clicks\": 0,\n        \"error_logs\": 0,\n        \"net_errors\": 0\n      },\n      \"__UNSAFE_refPath\": null\n    }\n  ],\n  \"__UNSAFE_refPath\": null\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "GetListSessionsResponse",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "Pagination",
    "description": "",
    "canonical": "objects/Pagination",
    "definitions": [
      {
        "title": "Pagination",
        "properties": [
          {
            "name": "num",
            "type": "integer",
            "description": "Current page number",
            "meta": []
          },
          {
            "name": "size",
            "type": "integer",
            "description": "Number of items per page",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"num\": 0,\n  \"size\": 0\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "Pagination",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "RelativeDateString",
    "description": "* `TODAY` - Today since midnight\n* `YESTERDAY` - Yesterday since midnight\n* `BEGINNING_OF_WEEK` - Nearest monday since midnight\n* `BEGINNING_OF_MONTH` - 1st of the month since midnight\n* `BEGINNING_OF_PREV_MONTH` - Previous 1st of the month since midnight\n* `TODAY-7DAYS` - Exact 7 days ago since midnight\n* `TODAY-30DAYS` - Exact 30 days ago since midnight\n",
    "canonical": "objects/RelativeDateString",
    "definitions": [
      {
        "title": "RelativeDateString",
        "properties": [],
        "meta": []
      }
    ],
    "examples": {
      "groups": []
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "RelativeDateString",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "AlertCreate",
    "description": "",
    "canonical": "objects/AlertCreate",
    "definitions": [
      {
        "title": "AlertCreate",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "description": "Name of the alert for easy identification",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "events",
            "type": "$$array",
            "description": "List of events that will trigger the alert",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ],
            "properties": [],
            "ofProperty": {
              "name": "",
              "type": "object",
              "properties": [
                {
                  "name": "kind",
                  "type": "integer",
                  "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
                  "meta": []
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Value or threshold that triggers the alert",
                  "meta": []
                }
              ],
              "description": "",
              "meta": [
                {
                  "name": "required",
                  "value": "true"
                }
              ]
            }
          },
          {
            "name": "provider",
            "type": "$$enum",
            "description": "Notification provider for the alert, `slack` or `webhooks`",
            "meta": [
              {
                "name": "required",
                "value": "true"
              },
              {
                "name": "enum-type",
                "value": "string"
              }
            ],
            "properties": [
              {
                "name": "slack",
                "type": "string",
                "description": "",
                "meta": []
              },
              {
                "name": "webhooks",
                "type": "string",
                "description": "",
                "meta": []
              }
            ],
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "string"
            }
          },
          {
            "name": "slack_channel_id",
            "type": "string",
            "description": "Slack channel ID where notifications will be sent (required if provider is `slack`)",
            "meta": []
          },
          {
            "name": "webhook_id",
            "type": "string",
            "description": "Webhook ID where notifications will be sent (required if provider is `webhooks`)",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"name\": \"\",\n  \"events\": [\n    {\n      \"kind\": 0,\n      \"value\": \"\"\n    }\n  ],\n  \"provider\": \"\",\n  \"slack_channel_id\": \"\",\n  \"webhook_id\": \"\",\n  \"__UNSAFE_refPath\": null\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "AlertCreate",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "AlertUpdate",
    "description": "",
    "canonical": "objects/AlertUpdate",
    "definitions": [
      {
        "title": "AlertUpdate",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "description": "New name for the alert",
            "meta": []
          },
          {
            "name": "events",
            "type": "$$array",
            "description": "Updated list of events that will trigger the alert",
            "meta": [],
            "properties": [],
            "ofProperty": {
              "name": "",
              "type": "object",
              "properties": [
                {
                  "name": "kind",
                  "type": "integer",
                  "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
                  "meta": []
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Value or threshold that triggers the alert",
                  "meta": []
                }
              ],
              "description": "",
              "meta": []
            }
          },
          {
            "name": "provider",
            "type": "$$enum",
            "description": "Updated notification provider for the alert",
            "meta": [
              {
                "name": "enum-type",
                "value": "string"
              }
            ],
            "properties": [
              {
                "name": "slack",
                "type": "string",
                "description": "",
                "meta": []
              },
              {
                "name": "webhooks",
                "type": "string",
                "description": "",
                "meta": []
              }
            ],
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "string"
            }
          },
          {
            "name": "slack_channel_id",
            "type": "string",
            "description": "Updated Slack channel ID for notifications",
            "meta": []
          },
          {
            "name": "webhook_id",
            "type": "string",
            "description": "Updated webhook ID for notifications",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"name\": \"\",\n  \"events\": [\n    {\n      \"kind\": 0,\n      \"value\": \"\"\n    }\n  ],\n  \"provider\": \"\",\n  \"slack_channel_id\": \"\",\n  \"webhook_id\": \"\",\n  \"__UNSAFE_refPath\": null\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "AlertUpdate",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "AlertEvent",
    "description": "",
    "canonical": "objects/AlertEvent",
    "definitions": [
      {
        "title": "AlertEvent",
        "properties": [
          {
            "name": "kind",
            "type": "integer",
            "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
            "meta": []
          },
          {
            "name": "value",
            "type": "string",
            "description": "Value or threshold that triggers the alert",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"kind\": 0,\n  \"value\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "AlertEvent",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "Alert",
    "description": "",
    "canonical": "objects/Alert",
    "definitions": [
      {
        "title": "Alert",
        "properties": [
          {
            "name": "alert_id",
            "type": "string",
            "description": "Unique identifier for the alert",
            "meta": []
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the alert",
            "meta": []
          },
          {
            "name": "events",
            "type": "$$array",
            "description": "List of events that trigger the alert",
            "meta": [],
            "properties": [],
            "ofProperty": {
              "name": "",
              "type": "object",
              "properties": [
                {
                  "name": "kind",
                  "type": "integer",
                  "description": "Kind of event, more info [here](/docs/api/rest/EventKind)",
                  "meta": []
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Value or threshold that triggers the alert",
                  "meta": []
                }
              ],
              "description": "",
              "meta": []
            }
          },
          {
            "name": "provider",
            "type": "$$enum",
            "description": "Notification provider for the alert",
            "meta": [
              {
                "name": "enum-type",
                "value": "string"
              }
            ],
            "properties": [
              {
                "name": "slack",
                "type": "string",
                "description": "",
                "meta": []
              },
              {
                "name": "webhooks",
                "type": "string",
                "description": "",
                "meta": []
              }
            ],
            "ofProperty": {
              "name": "",
              "description": "",
              "type": "string"
            }
          },
          {
            "name": "slack_channel_id",
            "type": "string",
            "description": "Slack channel ID for notifications",
            "meta": []
          },
          {
            "name": "webhook_id",
            "type": "string",
            "description": "Webhook ID for notifications",
            "meta": []
          },
          {
            "name": "enabled",
            "type": "boolean",
            "description": "Whether the alert is currently active",
            "meta": []
          },
          {
            "name": "creation_date",
            "type": "string",
            "description": "[ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp when the alert was created\n",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"alert_id\": \"\",\n  \"name\": \"\",\n  \"events\": [\n    {\n      \"kind\": 0,\n      \"value\": \"\"\n    }\n  ],\n  \"provider\": \"\",\n  \"slack_channel_id\": \"\",\n  \"webhook_id\": \"\",\n  \"enabled\": false,\n  \"creation_date\": \"\",\n  \"__UNSAFE_refPath\": null\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "Alert",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "AlertDeleted",
    "description": "",
    "canonical": "objects/AlertDeleted",
    "definitions": [
      {
        "title": "AlertDeleted",
        "properties": [
          {
            "name": "alert_id",
            "type": "string",
            "description": "ID of the deleted alert",
            "meta": []
          },
          {
            "name": "deleted",
            "type": "boolean",
            "description": "Confirmation that the alert was deleted",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"alert_id\": \"\",\n  \"deleted\": false\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "AlertDeleted",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "AlertProviderEnum",
    "description": "Available notification providers for alerts",
    "canonical": "objects/AlertProviderEnum",
    "definitions": [
      {
        "title": "AlertProviderEnum",
        "properties": [],
        "meta": []
      }
    ],
    "examples": {
      "groups": []
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "AlertProviderEnum",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "WebhookCreate",
    "description": "",
    "canonical": "objects/WebhookCreate",
    "definitions": [
      {
        "title": "WebhookCreate",
        "properties": [
          {
            "name": "url",
            "type": "string",
            "description": "URL for the webhook",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "website_id",
            "type": "string",
            "description": "Website ID",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "version",
            "type": "string",
            "description": "API version (e.g., v1.0)",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"url\": \"\",\n  \"website_id\": \"\",\n  \"version\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "WebhookCreate",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "WebhookUpdate",
    "description": "",
    "canonical": "objects/WebhookUpdate",
    "definitions": [
      {
        "title": "WebhookUpdate",
        "properties": [
          {
            "name": "url",
            "type": "string",
            "description": "URL for the webhook",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "website_id",
            "type": "string",
            "description": "Website ID",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "version",
            "type": "string",
            "description": "API version (e.g., v1.0)",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"url\": \"\",\n  \"website_id\": \"\",\n  \"version\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "WebhookUpdate",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "Webhook",
    "description": "",
    "canonical": "objects/Webhook",
    "definitions": [
      {
        "title": "Webhook",
        "properties": [
          {
            "name": "webhook_id",
            "type": "string",
            "description": "Webhook ID",
            "meta": []
          },
          {
            "name": "url",
            "type": "string",
            "description": "URL for the webhook",
            "meta": []
          },
          {
            "name": "website",
            "type": "string",
            "description": "Website name",
            "meta": []
          },
          {
            "name": "website_id",
            "type": "string",
            "description": "Website ID",
            "meta": []
          },
          {
            "name": "version",
            "type": "string",
            "description": "API version",
            "meta": []
          },
          {
            "name": "enabled",
            "type": "boolean",
            "description": "Webhook enabled status",
            "meta": []
          },
          {
            "name": "created_date",
            "type": "integer",
            "description": "Unix timestamp for creation date",
            "meta": []
          },
          {
            "name": "created_by",
            "type": "string",
            "description": "Creator of the webhook",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"webhook_id\": \"\",\n  \"url\": \"\",\n  \"website\": \"\",\n  \"website_id\": \"\",\n  \"version\": \"\",\n  \"enabled\": false,\n  \"created_date\": 0,\n  \"created_by\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "Webhook",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "WebhookDeleted",
    "description": "",
    "canonical": "objects/WebhookDeleted",
    "definitions": [
      {
        "title": "WebhookDeleted",
        "properties": [
          {
            "name": "webhook_id",
            "type": "string",
            "description": "Webhook ID",
            "meta": []
          },
          {
            "name": "deleted",
            "type": "boolean",
            "description": "Indicates if the webhook was deleted",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"webhook_id\": \"\",\n  \"deleted\": false\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "WebhookDeleted",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "Website",
    "description": "",
    "canonical": "objects/Website",
    "definitions": [
      {
        "title": "Website",
        "properties": [
          {
            "name": "website_id",
            "type": "string",
            "description": "Unique identifier for the website",
            "meta": []
          },
          {
            "name": "host",
            "type": "string",
            "description": "Domain name or hostname of the website (e.g., example.com)",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"website_id\": \"\",\n  \"host\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "Website",
      "group": [
        "Objects"
      ]
    }
  },
  {
    "title": "WebsiteCreate",
    "description": "",
    "canonical": "objects/WebsiteCreate",
    "definitions": [
      {
        "title": "WebsiteCreate",
        "properties": [
          {
            "name": "host",
            "type": "string",
            "description": "Domain name or hostname of the website to track",
            "meta": [
              {
                "name": "required",
                "value": "true"
              }
            ]
          },
          {
            "name": "description",
            "type": "string",
            "description": "Optional description of the website for organization purposes",
            "meta": []
          }
        ],
        "meta": []
      }
    ],
    "examples": {
      "groups": [
        {
          "description": "Example",
          "examples": [
            {
              "codeblock": {
                "tabs": [
                  {
                    "title": "json",
                    "language": "json",
                    "code": "{\n  \"host\": \"\",\n  \"description\": \"\"\n}"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "type": "rest_component_schema",
    "context": {
      "componentSchema": "WebsiteCreate",
      "group": [
        "Objects"
      ]
    }
  }
]